#BlueJ class context
comment0.params=
comment0.target=XboxController()
comment0.text=\r\n\ Same\ as\ XboxController(dll,\ 1,\ 50,\ 50).\r\n\ The\ DLL\ xboxcontroller.dll\ or\ xboxcontroller64.dll\ is\ searched\ in\ \r\n\ the\ Windows\ path\ (depending\ on\ the\ OS\ version).\r\n
comment1.params=controllerPollPeriod\ queuePollPeriod
comment1.target=XboxController(int,\ int)
comment1.text=\r\n\ Same\ as\ XboxController(dll,\ 1,\ controllerPollPeriod,\ queuePollPeriod).\r\n\ The\ DLL\ xboxcontroller.dll\ or\ xboxcontroller64.dll\ is\ searched\ in\ \r\n\ the\ Windows\ path\ (depending\ on\ the\ OS\ version).\r\n
comment10.params=leftVal\ rightVal
comment10.target=void\ vibrate(int,\ int)
comment10.text=\r\n\ Starts\ vibration\ with\ given\ left\ und\ right\ intensity.\r\n\ Returns\ immediately.\ Set\ left\ and\ right\ intensity\ to\ 0\ to\r\n\ stop\ vibration.\r\n\ @param\ leftVal\ left\ intensity\ 0..65535\r\n\ @param\ rightVal\ right\ intensity\ 0..65535\r\n
comment11.params=leftVal\ rightVal\ duration
comment11.target=void\ vibrate(int,\ int,\ int)
comment11.text=\r\n\ Vibrates\ with\ given\ left\ und\ right\ intensity\ for\ the\ given\r\n\ duration.\ Returns\ when\ vibration\ stops.\r\n\ @param\ leftVal\ left\ intensity\ 0..65535\r\n\ @param\ rightVal\ right\ intensity\ 0..65535\r\n\ @param\ duration\ rightVal\ vibration\ time\ in\ ms\r\n
comment12.params=
comment12.target=boolean\ isConnected()
comment12.text=\r\n\ Returns\ true\ if\ the\ last\ native\ polling\ call\ to\ the\ controller\ was\ successful.\r\n\ @return\ true,\ if\ the\ controller\ responded,\ otherwise\ false\r\n
comment13.params=
comment13.target=int\ countBuf()
comment14.params=
comment14.target=xboxdriver.ControllerState\ readData()
comment15.params=xboxControllerListener
comment15.target=void\ addXboxControllerListener(xboxdriver.XboxControllerListener)
comment15.text=\r\n\ Registers\ the\ given\ XboxControllerListener\ and\ starts\ polling\ the\ event\ queue.\r\n\ If\ a\ listener\ is\ already\ registered,\ stops\ its\ notifications.\ If\ null\ is\ given,\r\n\ stops\ the\ \ notification\ of\ an\ already\ registerd\ listener.\r\n\ @param\ xboxControllerListener\ the\ XboxControllerListener\ to\ register\r\n
comment16.params=e
comment16.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment17.params=
comment17.target=java.lang.String\ getVersion()
comment17.text=\r\n\ Returns\ version\ information.\r\n\ @return\ the\ version\ information\r\n
comment18.params=on
comment18.target=void\ setDebug(boolean)
comment18.text=\r\n\ Displays\ debug\ information\ when\ the\ native\ thread\ sends\ data\ to\ the\r\n\ FIFO\ queue\ and\ when\ the\ Java\ thread\ receives\ it.\r\n\ @param\ on\ if\ true,\ debug\ information\ is\ displayed\ at\ System.out\r\n
comment19.params=duration
comment19.target=void\ delay(int)
comment2.params=playerNb
comment2.target=XboxController(int)
comment2.text=\r\n\ Same\ as\ XboxController(dll,\ int\ playerNb,\ 50,\ 50).\r\n\ The\ DLL\ xboxcontroller.dll\ or\ xboxcontroller64.dll\ is\ searched\ in\ \r\n\ the\ Windows\ path\ (depending\ on\ the\ OS\ version).\r\n
comment20.params=
comment20.target=boolean\ is64bit()
comment3.params=dll\ playerNb\ controllerPollPeriod\ queuePollPeriod
comment3.target=XboxController(java.lang.String,\ int,\ int,\ int)
comment3.text=\r\n\ Creates\ a\ XboxController\ instance\ using\ the\ given\ native\ Windows\ DLL\r\n\ and\ tries\ to\ establish\ a\ connection\ to\ the\ controller\ with\ the\ given\ \r\n\ player\ number.\r\n\ @param\ dll\ the\ fully\ qualified\ path\ to\ the\ native\ DLL.\r\n\ If\ the\ extension\ .DLL\ is\ missing,\ the\ DLL\ is\ searched\ in\ the\ Windows\ path.\r\n\ @param\ playerNb\ the\ number\ of\ the\ player\ 1..4\r\n\ @param\ controllerPollPeriod\ the\ period\ (in\ ms)\ of\ the\ native\ timer\ that\ polls\ the\ state\ of\ the\ controller\r\n\ @param\ queuePollPeriod\ the\ period\ (in\ ms)\ of\ the\ Java\ timer\ that\ polls\ the\ message\ queue\r\n
comment4.params=dll\ playerNb\ controllerPollPeriod\ queuePollPeriod
comment4.target=void\ init(java.lang.String,\ int,\ int,\ int)
comment5.params=
comment5.target=void\ release()
comment5.text=\r\n\ Release\ native\ resources.\ \r\n\ Should\ be\ called\ before\ terminating\ the\ application.\r\n
comment6.params=zone
comment6.target=void\ setLeftTriggerDeadZone(double)
comment6.text=\r\n\ Sets\ the\ dead\ zone\ for\ LeftTrigger.\ Report\ 0\ if\r\n\ the\ measured\ magnitude\ is\ lower\ than\ the\ dead\ zone\ value.\r\n\ @param\ zone\ the\ zone\ with\ no\ notifications,\ no\ change\ if\ <\ 0\ or\ >\ 1\r\n
comment7.params=zone
comment7.target=void\ setRightTriggerDeadZone(double)
comment7.text=\r\n\ Sets\ the\ dead\ zone\ for\ RightTrigger.\ Report\ 0\ if\r\n\ the\ measured\ value\ is\ lower\ than\ the\ dead\ zone\ value.\r\n\ @param\ zone\ the\ zone\ with\ no\ notifications,\ no\ change\ if\ <\ 0\ or\ >\ 1\r\n
comment8.params=zone
comment8.target=void\ setLeftThumbDeadZone(double)
comment8.text=\r\n\ Sets\ the\ dead\ zone\ for\ the\ left\ thumb.\ Report\ magnitude\ 0\ if\r\n\ the\ measured\ magnitude\ is\ lower\ than\ the\ dead\ zone\ value.\r\n\ @param\ zone\ the\ zone\ to\ report\ magnitude\ 0\r\n
comment9.params=zone
comment9.target=void\ setRightThumbDeadZone(double)
comment9.text=\r\n\ Sets\ the\ dead\ zone\ for\ the\ right\ thumb.\ Report\ magnitude\ 0\ if\r\n\ the\ measured\ magnitude\ is\ lower\ than\ the\ dead\ zone\ value.\r\n\ @param\ zone\ the\ zone\ to\ report\ magnitude\ 0\r\n
numComments=21
